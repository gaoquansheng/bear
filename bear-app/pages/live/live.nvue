<template>
	<div>
		<view :style="{width: width + 'px',height:height + 'px'}" v-if="markact" class="mark">
			<text class="mark-text">直播启动中...</text>
		</view>
		<view>
			<live-pusher  :beauty="beauty" :style="{width: width + 'px',height:height + 'px'}" id="livePusher" ref="livePusher" 
			:url="rtmpUrl" mode="FHD"   aspect="9:16" 
			@statechange="statechange" @netstatus="netstatus" @error = "error"></live-pusher>
			
			<!-- 这是聊天室 -->
			<view class="chat" >
				<scroll-view :scroll-top="scrollTop" scroll-y="true" class="scroll-Y">
					<view class="chat-list" v-for="(it,i) in chatList" :key='i'>
						<text class="chat-username">用户{{it.sendUserTel}}：</text>
						<text class="chat-usertext">{{it.message}}</text>
					</view>
				</scroll-view>
			</view>
			
			<view :style="{width: width + 'px'}" class="but">
				<view v-for="(item,id) of tabList" :key="id" class="meiyanbut" @click="tmpMethods(item.func)">
					<image class="but-img" :src="item.image"  ></image>
					<text class="but-text">{{item.name}}</text>
				</view>
			</view>
		</view>
	</div>
</template>

<script>
	import {mapState} from "vuex"
	import uniPopup from "@/components/uni-popup/uni-popup.vue"
	export default {
		data() {
			return {
				width: '',
				height: '',
				url: 'rtmp://172.17.71.24:1935/live/',//这是推流地址
				websocketUrl: "ws://172.17.71.24:8080/webSocketServer/",
				context: null,
				context1: null,
				markact: true,
				beauty: 0,
				tabList:[
					{
						name: "开启美颜",
						image: "../../static/image/meiyan.png",
						func: "openBeauty"
					},
					{
						name: "结束直播",
						image: "../../static/image/stop.png",
						func: "stopLive"
					},
					{
						name: "切换摄像头",
						image: "../../static/image/qiehuan.png",
						func: "switchCamera"
					}	
				],
				chatList:[],
				scrollTop: 0,
				websocket: null,
				flag: false,
				planId: "",
				title: ""
			};
		},
		onLoad(option) {
			//获得上个页面传递的标题和planId
			this.planId = option.planId;
			this.title = option.title;			
			//获取设备的宽度和高度,设置直播全屏
			let res = uni.getSystemInfoSync()
			this.width = res.windowWidth;
			this.height = res.windowHeight;		
		},
		onReady() {
			this.context = uni.createLivePusherContext('livePusher', this);
			setTimeout(() => {
				this.startLive();
			}, 1000)
		},
		computed:mapState({
			rtmpUrl(state){
				let userTel = state.userTel;
				let lat = state.lat;//这里获取经纬度
				let lng = state.lng;
				return `${this.url}${userTel}?lat=${lat}&lng=${lng}&title=${this.title}&planId=${this.planId}`;
			}	
		}),
		methods: {
			tmpMethods(methodsName){
				this[methodsName]();
			},
			//直播相关方法
			openBeauty() {
				if(this.beauty == 0){
					this.beauty = 9;
					this.tabList[0].name = "关闭美颜";
				}else{
					this.beauty = 0;
					this.tabList[0].name = "开启美颜";
				}
			},
			startLive() {
				//开始推流之前要先调用一次停止，或关闭视频预览
				//我测试关闭视频预览没成功,就先这样吧
				let _this = this;
				this.context.stop({
					success: a => {
						console.log(JSON.stringify(a));
						
					}
				});
				this.context.start({
					success: a => {
						_this.markact = false;
						console.log('livePusher.start:' + JSON.stringify(a));
						// _this.context.switchCamera();
						_this.initWebSocket();
					}
				});

				
			},
			stopLive() {
				let _this = this;
				this.context.stop({
					success: a => {
						console.log(JSON.stringify(a));
						_this.websocket.close();
						uni.switchTab({
							url:"beforeLive"
						})
					}
				});

			},
			switchCamera() {
				this.context.switchCamera({
					success: (a) => {
						console.log("livePusher.switchCamera:" + JSON.stringify(a));
					}
				});
			},
			error(e) {
				console.log("error:" + JSON.stringify(e));
			},
			//WebSocket相关方法
			initWebSocket(){
				let _this = this;
				//建立websocket连接
				this.websocket = uni.connectSocket({
					url: this.websocketUrl+this.$store.state.userTel,
					success:()=>{
						console.log("连接成功");
					},
					fail:()=>{
						console.log("连接失败");
					}
				});
				this.websocket.onOpen(this.websocketOnOpen);
				this.websocket.onMessage(this.websocketOnMessage);
				this.websocket.onClose(this.websocketOnClose);
				this.websocket.onError(this.websocketOnError);
			},
			websocketOnOpen(){
				console.log("连接成功l hhh");
			},
			websocketOnMessage(res){
				console.log("接受数据");
				// console.log(res.data);
				
				this.chatList.push(JSON.parse(res.data));
				console.log(this.chatList)
			},
			websocketOnClose(){
				console.log("断开连接");
			},
			websocketOnError(){
				console.log("连接失败");
				// this.initWebSocket();
			},
			websocketSend(data){
				this.websocket.send(data);
			},
			websocketClose(){
				this.websocket.close();
				console.log("主动断开连接");
			}
		}
	}
</script>

<style>
	.but-img {
		width: 20px;
		height: 20px;
	}

	.meiyanbut {
		padding: 10px 20px 10px 20px;
		margin-left: 20px;
		display: flex;
		align-items: center;
		justify-content: center;
		flex-direction: column;
	}

	.but-text {
		padding-top: 3px;
		font-size: 13px;
		color: white;
	}

	.id {
		font-size: 14px;
		color: white;
	}

	.text-box {
		font-size: 12px;
		color: white;
	}

	.user-img {
		margin-right: 5px;
		width: 30px;
		height: 30px;
		border-radius: 50%;
	}

	.mark-text {
		color: white;
		font-size: 20px;
	}

	.mark {
		position: fixed;
		top: 0px;
		background-color: #000000;
		display: flex;
		align-items: center;
		justify-content: center;
		flex-direction: column;
	}

	.but {
		background-color: rgba(0, 0, 0, .4);
		position: fixed;
		bottom: 0px;
		display: flex;
		align-items: center;
		flex-direction: row;
		justify-content: space-between;
		padding-bottom: 20px;
	}


	.arrow-box {
		position: fixed;
		top: 60px;
		left: 20px;
		z-index: 10;
		border-radius: 20px;
		background-color: rgba(0, 0, 0, .4);
	}

	.jiesu {
		padding: 10px 20px 10px 20px;
		color: white;
		font-size: 16px;
	}
	
	.chat-username{
		font-size: 18px;
		color: white;
	}
	.chat-usertext{
		font-size: 16px;
		color: white;
	}
	.chat-list{
		margin-top: 5px;
		display: flex;
		align-items: center;
		justify-content: flex-start;
		flex-direction: row;
		background-color: rgba(0,0,0,.5);
		padding: 5px 10px 5px 10px;
		border-radius: 3px;
	}
	.scroll-Y{
		height: 150px;
		width: 250px;
	}
	.chat {
		position: fixed;
		z-index:10;
		bottom: 80px;
	}
</style>
